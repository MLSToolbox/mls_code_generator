{
    "data_collection": "\"\"\" data_collection.py \"\"\"\n\nfrom mls_lib.data_collection import CSVLoader\nfrom mls_lib.orchestration import Stage\n\ndef create_data_collection():\n\tdc =  Stage('Data Collection')\n\n\t# Gets the data to train\n\tcsvloader = CSVLoader(\n\t\tpath = 'train_v9rqX0R.csv',\n\t\tseparator = ','\n\t)\n\tdc.add_task(\n\t\tcsvloader\n\t)\n\t\n\tdc.add_output('data_from_csv', (csvloader, 'out'))\n\t\n\treturn dc\n\n",
    "data_cleaning": "\"\"\" data_cleaning.py \"\"\"\n\nfrom mls_lib.data_cleaning import ReplaceNullZero\nfrom mls_lib.orchestration import Stage\n\ndef create_data_cleaning():\n\tdc =  Stage('Data Cleaning')\n\n\treplace_nulls_zero = ReplaceNullZero(\n\t\tcolumn = 'Item_Weight'\n\t)\n\tdc.add_task(\n\t\treplace_nulls_zero,\n\t\tdata_in = (dc, 'raw_data')\n\t)\n\t\n\tdc.add_output('clean_data', (replace_nulls_zero, 'out'))\n\t\n\treturn dc\n\n",
    "feature_engineering": "\"\"\" feature_engineering.py \"\"\"\n\nfrom mls_lib.feature_engineering.encoder_training import LabelEncoderTrainer\nfrom mls_lib.feature_engineering import ColumnSelect\nfrom mls_lib.orchestration import Stage\n\ndef create_feature_engineering():\n\tfe =  Stage('Feature Engineering')\n\n\tlabel_encoder_train = LabelEncoderTrainer(\n\t\tcolumns = [\n\t\t\t'Item_Fat_Content',\n\t\t\t'Outlet_Location_Type',\n\t\t\t'Outlet_Size',\n\t\t\t'Item_Type',\n\t\t\t'Outlet_Type',\n\t\t\t'Outlet_Identifier'\n\t\t]\n\t)\n\tfe.add_task(\n\t\tlabel_encoder_train,\n\t\tdata = (fe, 'data')\n\t)\n\t\n\tselect_columns = ColumnSelect(\n\t\tcolumns = [\n\t\t\t'Item_Outlet_Sales'\n\t\t]\n\t)\n\tfe.add_task(\n\t\tselect_columns,\n\t\torigin_table = (label_encoder_train, 'out')\n\t)\n\t\n\tselect_columns_2 = ColumnSelect(\n\t\tcolumns = [\n\t\t\t'Item_Fat_Content',\n\t\t\t'Outlet_Location_Type',\n\t\t\t'Outlet_Size',\n\t\t\t'Item_Type',\n\t\t\t'Outlet_Type'\n\t\t]\n\t)\n\tfe.add_task(\n\t\tselect_columns_2,\n\t\torigin_table = (label_encoder_train, 'out')\n\t)\n\t\n\tfe.add_output('features', (select_columns_2, 'resulting_table'))\n\tfe.add_output('truth', (select_columns, 'resulting_table'))\n\t\n\treturn fe\n\n",
    "model_train": "\"\"\" model_train.py \"\"\"\n\nfrom mls_lib.model_training import SVMTrainer, TrainTestSplitter\nfrom mls_lib.orchestration import ParamLoader, Stage\n\ndef create_model_train():\n\tmt =  Stage('Model Train')\n\n\tsplit_train_test = TrainTestSplitter(\n\t\ttrain_percentage =  ParamLoader.load('model_train.train_percentage')\n\t)\n\tmt.add_task(\n\t\tsplit_train_test,\n\t\tfeatures = (mt, 'features'),\n\t\ttruth = (mt, 'truth')\n\t)\n\t\n\tsvm_train = SVMTrainer(\n\t\tkernel = 'linear'\n\t)\n\tmt.add_task(\n\t\tsvm_train,\n\t\tfeatures = (split_train_test, 'features_train'),\n\t\ttruth = (split_train_test, 'truth_train')\n\t)\n\t\n\tmt.add_output('trained_model', (svm_train, 'model'))\n\tmt.add_output('features test', (split_train_test, 'features_test'))\n\tmt.add_output('truth test', (split_train_test, 'truth_test'))\n\t\n\treturn mt\n\n",
    "model_evaluation": "\"\"\" model_evaluation.py \"\"\"\n\nfrom mls_lib.model_evaluation import EvaluateAccuracy\nfrom mls_lib.orchestration import Stage\n\ndef create_model_evaluation():\n\tme =  Stage('Model evaluation')\n\n\tevaluate_accuracy = EvaluateAccuracy()\n\tme.add_task(\n\t\tevaluate_accuracy,\n\t\tmodel = (me, 'model'),\n\t\tfeatures = (me, 'features'),\n\t\ttruth = (me, 'truth')\n\t)\n\t\n\t\n\treturn me\n\n",
    "main": "import warnings\nwarnings.filterwarnings('ignore')\n\nfrom mls_lib.orchestration import Pipeline\nfrom data_collection import create_data_collection\nfrom data_cleaning import create_data_cleaning\nfrom feature_engineering import create_feature_engineering\nfrom model_train import create_model_train\nfrom model_evaluation import create_model_evaluation\n\ndef main():\n\troot = Pipeline()\n\tdata_collection = create_data_collection()\n\troot.add_stage(data_collection, \n\t)\n\n\tdata_cleaning = create_data_cleaning()\n\troot.add_stage(data_cleaning, \n\t\traw_data = (data_collection, 'data_from_csv'),\n\t)\n\n\tfeature_engineering = create_feature_engineering()\n\troot.add_stage(feature_engineering, \n\t\tdata = (data_cleaning, 'clean_data'),\n\t)\n\n\tmodel_train = create_model_train()\n\troot.add_stage(model_train, \n\t\tfeatures = (feature_engineering, 'features'),\n\t\ttruth = (feature_engineering, 'truth'),\n\t)\n\n\tmodel_evaluation = create_model_evaluation()\n\troot.add_stage(model_evaluation, \n\t\tmodel = (model_train, 'trained_model'),\n\t\tfeatures = (model_train, 'features test'),\n\t\ttruth = (model_train, 'truth test'),\n\t)\n\n\troot.execute()\n\nif __name__ == '__main__':\n\tmain()"
}